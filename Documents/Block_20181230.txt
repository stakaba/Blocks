Block_20181230

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
■全体概要
□要件定義
□機能設計
□クラス設計


■技術要綱
○勉強するといいもの
・GitHub
・Unity
・VisualStudio
・C#
  ├列挙数
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
■要件定義・機能設計
○なにをつくるか
・Blocks(サーバー)※ローカル対応
  ├①今どちらのターンであるか
  ├②今盤面はどうなっているか
  │└③クライアントから置く要請が来た場合、置けるか判定する(※初手込み)
  │  └④おけない場合の処理
  ├⑤お互いの駒の状態
  │└⑥場の点数計算
  │  └⑩お互いに置けなかった場合ゲーム終了処理
  └⑮先攻後攻を決める機能
・Blocks(クライアント)
  ├⑦どちらのターンか取得する処理(開幕ターンも含む 自分がplayer1か2かも取得)
  ├⑧今盤面はどうなっているか取得する処理
  │├⑭手番をパスする処理
  │├⑨置く要請処理
  ││└⑪おけた場合相手にターンをゆずる処理
  │└⑬点数を取得する処理
  └⑫自分の駒がなにか取得する処理
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
■クラス設計
○サーバー
・mainクラス
  ├データ①：どっちのターンか(enum)※
  ├データ②：盤面(enum[14][14])※
  ├データ③：コマ情報(bool[5][5])
  ├データ④：コマID(enum)※
  ├データ⑤：プレイヤー1の駒情報(bool[21])
  ├データ⑥：プレイヤー1の駒情報(bool[21])
  │
  ├処理①：開幕のプレーヤーとターンを決定する
  ├処理②：点数計算
  │
  ├クラス①：クライアントの置く要請を受け取り、置けるか判定する
  ├クラス②：おけた場合mapを更新する
  ├クラス③：ターンを更新する
・
・
※データ①
typedef enum tarn{
    player1 = 1,
    player2 = 2,
    finish  = 3
}rarn_e;

※データ②
typedef enum map{
    unkonown    = 0,
    player1     = 1,
    player2     = 2,
}rarn_e;

※データ④
typedef enum comaId{
    unknown = 0,
    singlestick = 1,
    doubleStick,
    threeStick,
    ・・・
}coma_e;

※ unknown player1 player2 finishを持つ
○クライアント
・mainクラス
  ├データ①：盤面(enum[14][14])※
  ├データ②：コマ情報(bool[5][5])
  ├データ③：コマID(enum)※
  ├データ④：プレイヤー1の駒情報(bool[21])
  │
  ├クラス①：ターンをサーバーに問い合わせる
  ├クラス②：おけるかサーバーに問い合わせる(パスも含む
  ├クラス③：ブロックを動作させる
  ├クラス④：所持ブロックを問い合わせる
  │
・
・


■次回までの方針
○サーバー側は最小のうちはstub
○よっぷの担当
・GitHubの環境について調べて構築する
・Unity環境とソースも最低限の枠を作成
・手持ちのブロックについて担当
○ルールの担当
・GitHub構築まで待機
・UIを考えておく
・ブロックを置くクラスを担当

■次回について
来週中くらいにGitHub構築後によっぷから連絡
(5日か6日くらい？)

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
■メモ
#include <stdio.h>
void main(void){
    sayHello();
    SayGoodBay();
}

void sayHello(void){
    printf("Hellow");
}

void SayGoodBay(void){
    printf("Hellow");
}

typedef enum tarn{
    player1 = 1,
    player2 = 2,
    finish  = 3
}rarn_n;

typedef enum map{
    unkonown    = 0,
    player1     = 1,
    player2     = 2,
}rarn_n;


    
    if(Globaltarn == player1){
        return "あなたのターンです";
    } elseif(Globaltarn == player2){
        return "ほかのプレイヤーのターンです"
    }


    enum[14][14] map;

    

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
